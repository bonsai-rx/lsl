{
  "api/EmotionalCities.Lsl.ChannelFormat.html": {
    "href": "api/EmotionalCities.Lsl.ChannelFormat.html",
    "title": "Enum ChannelFormat",
    "keywords": "Enum ChannelFormat Specifies the data format of a LSL channel. Namespace : EmotionalCities.Lsl Assembly : EmotionalCities.Lsl.dll Syntax public enum ChannelFormat Fields Name Description Double64 Used for universal numeric data as long as network and disk constraints permit. The largest representable integer is 53-bit. Float32 Used for up to 24-bit precision measurements in the appropriate physical unit (e.g. microvolts). Integers from -16777216 to 16777216 are represented accurately. Int16 Used for very high sampling rate signals (40kHz+) or consumer-grade audio. Int32 Used for high sampling rate digitized formats that require 32-bit precision. Depends critically on meta-data to represent meaningful units. Also useful for application event codes or other coded data. Int64 For future compatibility only. Support for this type is not yet exposed in all languages. Some clients will not be able to send or receive data of this type. Int8 Used for binary signals or other coded data. Not recommended for encoding string data. String Used for variable-length ASCII strings or data blobs, such as video frames, complex event descriptions, etc. Undefined Specifies that the data can not be transmitted."
  },
  "api/EmotionalCities.Lsl.html": {
    "href": "api/EmotionalCities.Lsl.html",
    "title": "Namespace EmotionalCities.Lsl",
    "keywords": "Namespace EmotionalCities.Lsl Classes InternalException Represents an error indicating an internal failure has occurred inside liblsl. LostException Represents an error indicating that the source of a stream inlet has been irrecoverably lost. StreamInlet Represents an operator that pulls data buffers from the specified LSL stream into an observable sequence. StreamOutlet Represents an operator that pushes data buffers from an observable sequence into the specified LSL stream. Timestamp Represents an operator that records the local LSL timestamp for each element produced by an observable sequence. Timestamped Provides static methods for creating timestamped payload objects. TimestampedChunk Provides static methods for creating timestamped chunk objects. TimestampedSample Provides static methods for creating timestamped sample objects. Structs Timestamped<T> Represents a timestamped value. TimestampedChunk<T> Represents a timestamped chunk. TimestampedChunkBuffer Represents a timestamped chunk buffer. TimestampedSample<T> Represents a timestamped sample. Enums ChannelFormat Specifies the data format of a LSL channel. ProcessingOptions Specifies options for post-processing of samples for an LSL stream inlet."
  },
  "api/EmotionalCities.Lsl.InternalException.html": {
    "href": "api/EmotionalCities.Lsl.InternalException.html",
    "title": "Class InternalException",
    "keywords": "Class InternalException Represents an error indicating an internal failure has occurred inside liblsl. Inheritance Object Exception InternalException Implements _Exception ISerializable Inherited Members Exception.GetBaseException() Exception.GetObjectData(SerializationInfo, StreamingContext) Exception.GetType() Exception.ToString() Exception.Data Exception.HelpLink Exception.HResult Exception.InnerException Exception.Message Exception.Source Exception.StackTrace Exception.TargetSite Exception.SerializeObjectState Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Namespace : EmotionalCities.Lsl Assembly : EmotionalCities.Lsl.dll Syntax public class InternalException : Exception, _Exception, ISerializable Constructors | Improve this Doc View Source InternalException(SerializationInfo, StreamingContext) Declaration protected InternalException(SerializationInfo info, StreamingContext context) Parameters Type Name Description SerializationInfo info StreamingContext context | Improve this Doc View Source InternalException(String, Exception) Declaration public InternalException(string message = \"\", Exception innerException = null) Parameters Type Name Description String message Exception innerException Implements System.Runtime.InteropServices._Exception System.Runtime.Serialization.ISerializable"
  },
  "api/EmotionalCities.Lsl.LostException.html": {
    "href": "api/EmotionalCities.Lsl.LostException.html",
    "title": "Class LostException",
    "keywords": "Class LostException Represents an error indicating that the source of a stream inlet has been irrecoverably lost. Inheritance Object Exception LostException Implements _Exception ISerializable Inherited Members Exception.GetBaseException() Exception.GetObjectData(SerializationInfo, StreamingContext) Exception.GetType() Exception.ToString() Exception.Data Exception.HelpLink Exception.HResult Exception.InnerException Exception.Message Exception.Source Exception.StackTrace Exception.TargetSite Exception.SerializeObjectState Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Namespace : EmotionalCities.Lsl Assembly : EmotionalCities.Lsl.dll Syntax public class LostException : Exception, _Exception, ISerializable Constructors | Improve this Doc View Source LostException(SerializationInfo, StreamingContext) Declaration protected LostException(SerializationInfo info, StreamingContext context) Parameters Type Name Description SerializationInfo info StreamingContext context | Improve this Doc View Source LostException(String, Exception) Declaration public LostException(string message = \"\", Exception innerException = null) Parameters Type Name Description String message Exception innerException Implements System.Runtime.InteropServices._Exception System.Runtime.Serialization.ISerializable"
  },
  "api/EmotionalCities.Lsl.ProcessingOptions.html": {
    "href": "api/EmotionalCities.Lsl.ProcessingOptions.html",
    "title": "Enum ProcessingOptions",
    "keywords": "Enum ProcessingOptions Specifies options for post-processing of samples for an LSL stream inlet. Namespace : EmotionalCities.Lsl Assembly : EmotionalCities.Lsl.dll Syntax [Flags] public enum ProcessingOptions Fields Name Description All Use all available postprocessing options. Clocksync Perform automatic clock synchronization. Dejitter Remove random jitter from timestamps using a trend-adjusted smoothing algorithm. Monotonize Force timestamps to be monotonically ascending. None No automatic post-processing. Provides ground truth timestamps for manual post-processing. Threadsafe Post-processing is thread-safe (same inlet can be read from by multiple threads) at the cost of more CPU usage."
  },
  "api/EmotionalCities.Lsl.StreamInlet.html": {
    "href": "api/EmotionalCities.Lsl.StreamInlet.html",
    "title": "Class StreamInlet",
    "keywords": "Class StreamInlet Represents an operator that pulls data buffers from the specified LSL stream into an observable sequence. Inheritance Object StreamInlet Implements INamedElement Namespace : EmotionalCities.Lsl Assembly : EmotionalCities.Lsl.dll Syntax public class StreamInlet : ZeroArgumentExpressionBuilder, INamedElement Properties | Improve this Doc View Source ChannelCount Gets or sets a value specifying the number of channels in the LSL stream. Declaration public int ChannelCount { get; set; } Property Value Type Description Int32 | Improve this Doc View Source ChannelFormat Gets or sets a value specifying the data format of each channel in the LSL stream. Declaration public ChannelFormat ChannelFormat { get; set; } Property Value Type Description ChannelFormat | Improve this Doc View Source ChunkSize Gets or sets a value specifying the number of samples in each chunk. If no value is specified, the output will be a single sample for each channel. Declaration public int? ChunkSize { get; set; } Property Value Type Description Nullable < Int32 > | Improve this Doc View Source ContentType Gets or sets a value specifying the content type of the LSL stream. If no content type is specified, the first stream of any type with the specified name will be used. Declaration public string ContentType { get; set; } Property Value Type Description String | Improve this Doc View Source Name Gets or sets the name of the LSL stream from which to pull data. If no name is specified, the first stream with the specified content type will be used. Declaration public string Name { get; set; } Property Value Type Description String | Improve this Doc View Source ProcessingOptions Gets or sets a value specifying the postprocessing time synchronization options to use on the LSL stream. Declaration public ProcessingOptions ProcessingOptions { get; set; } Property Value Type Description ProcessingOptions Methods | Improve this Doc View Source Build(IEnumerable<Expression>) Declaration public override Expression Build(IEnumerable<Expression> arguments) Parameters Type Name Description IEnumerable < Expression > arguments Returns Type Description Expression Implements INamedElement"
  },
  "api/EmotionalCities.Lsl.StreamOutlet.html": {
    "href": "api/EmotionalCities.Lsl.StreamOutlet.html",
    "title": "Class StreamOutlet",
    "keywords": "Class StreamOutlet Represents an operator that pushes data buffers from an observable sequence into the specified LSL stream. Inheritance Object StreamOutlet Implements INamedElement Namespace : EmotionalCities.Lsl Assembly : EmotionalCities.Lsl.dll Syntax public class StreamOutlet : SingleArgumentExpressionBuilder, INamedElement Properties | Improve this Doc View Source ChannelCount Gets or sets a value specifying the number of channels in the LSL stream. Declaration public int ChannelCount { get; set; } Property Value Type Description Int32 | Improve this Doc View Source ContentType Gets or sets a value specifying the content type of the LSL stream. If no content type is specified, the simple name of the input type will be used. Declaration public string ContentType { get; set; } Property Value Type Description String | Improve this Doc View Source Name Gets or sets the name of the LSL stream to which data will be pushed. Declaration public string Name { get; set; } Property Value Type Description String | Improve this Doc View Source SampleRate Gets or sets the nominal sampling rate used by the data source, in Hz. If a value of zero is specified, the data source will be considered to have irregular timing. Declaration public int SampleRate { get; set; } Property Value Type Description Int32 | Improve this Doc View Source Selector Gets or sets the inner properties that will be selected when writing each element of the sequence. Declaration public string Selector { get; set; } Property Value Type Description String | Improve this Doc View Source SourceId Gets or sets the unique identifier of the stream data source. Declaration public string SourceId { get; set; } Property Value Type Description String Remarks The unique source (or device) identifier is an optional piece of information that, if available, allows endpoints to re-acquire a stream automatically once it is back online. Methods | Improve this Doc View Source Build(IEnumerable<Expression>) Declaration public override Expression Build(IEnumerable<Expression> arguments) Parameters Type Name Description IEnumerable < Expression > arguments Returns Type Description Expression | Improve this Doc View Source Process(IObservable<Timestamped<Mat>>) Pushes an observable sequence of timestamped multi-channel buffers into the specified LSL stream. Declaration public IObservable<Timestamped<Mat>> Process(IObservable<Timestamped<Mat>> source) Parameters Type Name Description IObservable < Timestamped < Mat >> source The sequence of timestamped multi-channel buffers to push to the LSL stream. Each buffer must have the same number of rows as the total number of channels in the stream. Returns Type Description IObservable < Timestamped < Mat >> An observable sequence that is identical to the source sequence but where there is an additional side effect of writing the timestamped multi-channel buffers to the LSL stream. | Improve this Doc View Source Process(IObservable<Timestamped<Byte>>) Pushes an observable sequence of timestamped unsigned 8-bit integers into the specified LSL stream. Declaration public IObservable<Timestamped<byte>> Process(IObservable<Timestamped<byte>> source) Parameters Type Name Description IObservable < Timestamped < Byte >> source The sequence of timestamped unsigned 8-bit integers to push to the LSL stream. Returns Type Description IObservable < Timestamped < Byte >> An observable sequence that is identical to the source sequence but where there is an additional side effect of writing the timestamped values to the LSL stream. | Improve this Doc View Source Process(IObservable<Timestamped<Double>>) Pushes an observable sequence of timestamped 64-bit floating-point values into the specified LSL stream. Declaration public IObservable<Timestamped<double>> Process(IObservable<Timestamped<double>> source) Parameters Type Name Description IObservable < Timestamped < Double >> source The sequence of timestamped 64-bit floating-point values to push to the LSL stream. Returns Type Description IObservable < Timestamped < Double >> An observable sequence that is identical to the source sequence but where there is an additional side effect of writing the timestamped values to the LSL stream. | Improve this Doc View Source Process(IObservable<Timestamped<Int16>>) Pushes an observable sequence of timestamped signed 16-bit integers into the specified LSL stream. Declaration public IObservable<Timestamped<short>> Process(IObservable<Timestamped<short>> source) Parameters Type Name Description IObservable < Timestamped < Int16 >> source The sequence of timestamped signed 16-bit integers to push to the LSL stream. Returns Type Description IObservable < Timestamped < Int16 >> An observable sequence that is identical to the source sequence but where there is an additional side effect of writing the timestamped values to the LSL stream. | Improve this Doc View Source Process(IObservable<Timestamped<Int32>>) Pushes an observable sequence of timestamped signed 32-bit integers into the specified LSL stream. Declaration public IObservable<Timestamped<int>> Process(IObservable<Timestamped<int>> source) Parameters Type Name Description IObservable < Timestamped < Int32 >> source The sequence of timestamped signed 32-bit integers to push to the LSL stream. Returns Type Description IObservable < Timestamped < Int32 >> An observable sequence that is identical to the source sequence but where there is an additional side effect of writing the timestamped values to the LSL stream. | Improve this Doc View Source Process(IObservable<Timestamped<Single>>) Pushes an observable sequence of timestamped 32-bit floating-point values into the specified LSL stream. Declaration public IObservable<Timestamped<float>> Process(IObservable<Timestamped<float>> source) Parameters Type Name Description IObservable < Timestamped < Single >> source The sequence of timestamped 32-bit floating-point values to push to the LSL stream. Returns Type Description IObservable < Timestamped < Single >> An observable sequence that is identical to the source sequence but where there is an additional side effect of writing the timestamped values to the LSL stream. | Improve this Doc View Source Process(IObservable<Timestamped<String>>) Pushes an observable sequence of timestamped variable length strings into the specified LSL stream. Declaration public IObservable<Timestamped<string>> Process(IObservable<Timestamped<string>> source) Parameters Type Name Description IObservable < Timestamped < String >> source The sequence of timestamped variable length strings to push to the LSL stream. Returns Type Description IObservable < Timestamped < String >> An observable sequence that is identical to the source sequence but where there is an additional side effect of writing the timestamped values to the LSL stream. | Improve this Doc View Source Process(IObservable<TimestampedChunk<Byte>>) Pushes an observable sequence of timestamped unsigned 8-bit chunks into the specified LSL stream. Declaration public IObservable<TimestampedChunk<byte>> Process(IObservable<TimestampedChunk<byte>> source) Parameters Type Name Description IObservable < TimestampedChunk < Byte >> source The sequence of timestamped unsigned 8-bit chunks to push to the LSL stream. Returns Type Description IObservable < TimestampedChunk < Byte >> An observable sequence that is identical to the source sequence but where there is an additional side effect of writing the timestamped chunks to the LSL stream. | Improve this Doc View Source Process(IObservable<TimestampedChunk<Double>>) Pushes an observable sequence of timestamped 64-bit floating-point chunks into the specified LSL stream. Declaration public IObservable<TimestampedChunk<double>> Process(IObservable<TimestampedChunk<double>> source) Parameters Type Name Description IObservable < TimestampedChunk < Double >> source The sequence of timestamped 64-bit floating-point chunks to push to the LSL stream. Returns Type Description IObservable < TimestampedChunk < Double >> An observable sequence that is identical to the source sequence but where there is an additional side effect of writing the timestamped chunks to the LSL stream. | Improve this Doc View Source Process(IObservable<TimestampedChunk<Int16>>) Pushes an observable sequence of timestamped signed 16-bit chunks into the specified LSL stream. Declaration public IObservable<TimestampedChunk<short>> Process(IObservable<TimestampedChunk<short>> source) Parameters Type Name Description IObservable < TimestampedChunk < Int16 >> source The sequence of timestamped signed 16-bit chunks to push to the LSL stream. Returns Type Description IObservable < TimestampedChunk < Int16 >> An observable sequence that is identical to the source sequence but where there is an additional side effect of writing the timestamped chunks to the LSL stream. | Improve this Doc View Source Process(IObservable<TimestampedChunk<Int32>>) Pushes an observable sequence of timestamped signed 32-bit chunks into the specified LSL stream. Declaration public IObservable<TimestampedChunk<int>> Process(IObservable<TimestampedChunk<int>> source) Parameters Type Name Description IObservable < TimestampedChunk < Int32 >> source The sequence of timestamped signed 32-bit chunks to push to the LSL stream. Returns Type Description IObservable < TimestampedChunk < Int32 >> An observable sequence that is identical to the source sequence but where there is an additional side effect of writing the timestamped chunks to the LSL stream. | Improve this Doc View Source Process(IObservable<TimestampedChunk<Single>>) Pushes an observable sequence of timestamped 32-bit floating-point chunks into the specified LSL stream. Declaration public IObservable<TimestampedChunk<float>> Process(IObservable<TimestampedChunk<float>> source) Parameters Type Name Description IObservable < TimestampedChunk < Single >> source The sequence of timestamped 32-bit floating-point chunks to push to the LSL stream. Returns Type Description IObservable < TimestampedChunk < Single >> An observable sequence that is identical to the source sequence but where there is an additional side effect of writing the timestamped chunks to the LSL stream. | Improve this Doc View Source Process(IObservable<TimestampedChunk<String>>) Pushes an observable sequence of timestamped variable length chunks into the specified LSL stream. Declaration public IObservable<TimestampedChunk<string>> Process(IObservable<TimestampedChunk<string>> source) Parameters Type Name Description IObservable < TimestampedChunk < String >> source The sequence of timestamped variable length chunks to push to the LSL stream. Returns Type Description IObservable < TimestampedChunk < String >> An observable sequence that is identical to the source sequence but where there is an additional side effect of writing the timestamped chunks to the LSL stream. | Improve this Doc View Source Process(IObservable<TimestampedSample<Byte>>) Pushes an observable sequence of timestamped unsigned 8-bit samples into the specified LSL stream. Declaration public IObservable<TimestampedSample<byte>> Process(IObservable<TimestampedSample<byte>> source) Parameters Type Name Description IObservable < TimestampedSample < Byte >> source The sequence of timestamped unsigned 8-bit samples to push to the LSL stream. Each sample array must have the same number of values as the total number of channels in the LSL stream. Returns Type Description IObservable < TimestampedSample < Byte >> An observable sequence that is identical to the source sequence but where there is an additional side effect of writing the timestamped samples to the LSL stream. | Improve this Doc View Source Process(IObservable<TimestampedSample<Double>>) Pushes an observable sequence of timestamped 64-bit floating-point samples into the specified LSL stream. Declaration public IObservable<TimestampedSample<double>> Process(IObservable<TimestampedSample<double>> source) Parameters Type Name Description IObservable < TimestampedSample < Double >> source The sequence of timestamped 64-bit floating-point samples to push to the LSL stream. Each sample array must have the same number of values as the total number of channels in the LSL stream. Returns Type Description IObservable < TimestampedSample < Double >> An observable sequence that is identical to the source sequence but where there is an additional side effect of writing the timestamped samples to the LSL stream. | Improve this Doc View Source Process(IObservable<TimestampedSample<Int16>>) Pushes an observable sequence of timestamped signed 16-bit samples into the specified LSL stream. Declaration public IObservable<TimestampedSample<short>> Process(IObservable<TimestampedSample<short>> source) Parameters Type Name Description IObservable < TimestampedSample < Int16 >> source The sequence of timestamped signed 16-bit samples to push to the LSL stream. Each sample array must have the same number of values as the total number of channels in the LSL stream. Returns Type Description IObservable < TimestampedSample < Int16 >> An observable sequence that is identical to the source sequence but where there is an additional side effect of writing the timestamped samples to the LSL stream. | Improve this Doc View Source Process(IObservable<TimestampedSample<Int32>>) Pushes an observable sequence of timestamped signed 32-bit samples into the specified LSL stream. Declaration public IObservable<TimestampedSample<int>> Process(IObservable<TimestampedSample<int>> source) Parameters Type Name Description IObservable < TimestampedSample < Int32 >> source The sequence of timestamped signed 32-bit samples to push to the LSL stream. Each sample array must have the same number of values as the total number of channels in the LSL stream. Returns Type Description IObservable < TimestampedSample < Int32 >> An observable sequence that is identical to the source sequence but where there is an additional side effect of writing the timestamped samples to the LSL stream. | Improve this Doc View Source Process(IObservable<TimestampedSample<Single>>) Pushes an observable sequence of timestamped 32-bit floating-point samples into the specified LSL stream. Declaration public IObservable<TimestampedSample<float>> Process(IObservable<TimestampedSample<float>> source) Parameters Type Name Description IObservable < TimestampedSample < Single >> source The sequence of timestamped 32-bit floating-point samples to push to the LSL stream. Each sample array must have the same number of values as the total number of channels in the LSL stream. Returns Type Description IObservable < TimestampedSample < Single >> An observable sequence that is identical to the source sequence but where there is an additional side effect of writing the timestamped samples to the LSL stream. | Improve this Doc View Source Process(IObservable<TimestampedSample<String>>) Pushes an observable sequence of timestamped variable length samples into the specified LSL stream. Declaration public IObservable<TimestampedSample<string>> Process(IObservable<TimestampedSample<string>> source) Parameters Type Name Description IObservable < TimestampedSample < String >> source The sequence of timestamped variable length samples to push to the LSL stream. Each sample array must have the same number of values as the total number of channels in the LSL stream. Returns Type Description IObservable < TimestampedSample < String >> An observable sequence that is identical to the source sequence but where there is an additional side effect of writing the timestamped samples to the LSL stream. | Improve this Doc View Source Process(IObservable<Mat>) Pushes an observable sequence of multi-channel buffers into the specified LSL stream. Declaration public IObservable<Mat> Process(IObservable<Mat> source) Parameters Type Name Description IObservable < Mat > source The sequence of multi-channel buffers to push to the LSL stream. Each buffer must have the same number of rows as the total number of channels in the stream. Returns Type Description IObservable < Mat > An observable sequence that is identical to the source sequence but where there is an additional side effect of writing the buffers to the LSL stream. | Improve this Doc View Source Process(IObservable<Byte[]>) Pushes an observable sequence of unsigned 8-bit samples into the specified LSL stream. Declaration public IObservable<byte[]> Process(IObservable<byte[]> source) Parameters Type Name Description IObservable < Byte []> source The sequence of unsigned 8-bit samples to push to the LSL stream. Each array must have the same number of values as the total number of channels in the stream. Returns Type Description IObservable < Byte []> An observable sequence that is identical to the source sequence but where there is an additional side effect of writing the samples to the LSL stream. | Improve this Doc View Source Process(IObservable<Byte[,]>) Pushes an observable sequence of unsigned 8-bit chunks into the specified LSL stream. Declaration public IObservable<byte[, ]> Process(IObservable<byte[, ]> source) Parameters Type Name Description IObservable < Byte [,]> source The sequence of unsigned 8-bit chunks to push to the LSL stream. Each array must have the same number of columns as the total number of channels in the stream. Returns Type Description IObservable < Byte [,]> An observable sequence that is identical to the source sequence but where there is an additional side effect of writing the chunks to the LSL stream. | Improve this Doc View Source Process(IObservable<Byte>) Pushes an observable sequence of unsigned 8-bit integers into the specified LSL stream. Declaration public IObservable<byte> Process(IObservable<byte> source) Parameters Type Name Description IObservable < Byte > source The sequence of unsigned 8-bit integers to push to the LSL stream. Returns Type Description IObservable < Byte > An observable sequence that is identical to the source sequence but where there is an additional side effect of writing the values to the LSL stream. | Improve this Doc View Source Process(IObservable<Double[]>) Pushes an observable sequence of 64-bit floating-point samples into the specified LSL stream. Declaration public IObservable<double[]> Process(IObservable<double[]> source) Parameters Type Name Description IObservable < Double []> source The sequence of 64-bit floating-point samples to push to the LSL stream. Each array must have the same number of values as the total number of channels in the stream. Returns Type Description IObservable < Double []> An observable sequence that is identical to the source sequence but where there is an additional side effect of writing the samples to the LSL stream. | Improve this Doc View Source Process(IObservable<Double[,]>) Pushes an observable sequence of 64-bit floating-point chunks into the specified LSL stream. Declaration public IObservable<double[, ]> Process(IObservable<double[, ]> source) Parameters Type Name Description IObservable < Double [,]> source The sequence of 64-bit floating-point chunks to push to the LSL stream. Each array must have the same number of columns as the total number of channels in the stream. Returns Type Description IObservable < Double [,]> An observable sequence that is identical to the source sequence but where there is an additional side effect of writing the chunks to the LSL stream. | Improve this Doc View Source Process(IObservable<Double>) Pushes an observable sequence of 64-bit floating-point values into the specified LSL stream. Declaration public IObservable<double> Process(IObservable<double> source) Parameters Type Name Description IObservable < Double > source The sequence of 64-bit floating-point values to push to the LSL stream. Returns Type Description IObservable < Double > An observable sequence that is identical to the source sequence but where there is an additional side effect of writing the values to the LSL stream. | Improve this Doc View Source Process(IObservable<Int16[]>) Pushes an observable sequence of signed 16-bit samples into the specified LSL stream. Declaration public IObservable<short[]> Process(IObservable<short[]> source) Parameters Type Name Description IObservable < Int16 []> source The sequence of signed 16-bit samples to push to the LSL stream. Each array must have the same number of values as the total number of channels in the stream. Returns Type Description IObservable < Int16 []> An observable sequence that is identical to the source sequence but where there is an additional side effect of writing the samples to the LSL stream. | Improve this Doc View Source Process(IObservable<Int16[,]>) Pushes an observable sequence of signed 16-bit chunks into the specified LSL stream. Declaration public IObservable<short[, ]> Process(IObservable<short[, ]> source) Parameters Type Name Description IObservable < Int16 [,]> source The sequence of signed 16-bit chunks to push to the LSL stream. Each array must have the same number of columns as the total number of channels in the stream. Returns Type Description IObservable < Int16 [,]> An observable sequence that is identical to the source sequence but where there is an additional side effect of writing the chunks to the LSL stream. | Improve this Doc View Source Process(IObservable<Int16>) Pushes an observable sequence of signed 16-bit integers into the specified LSL stream. Declaration public IObservable<short> Process(IObservable<short> source) Parameters Type Name Description IObservable < Int16 > source The sequence of signed 16-bit integers to push to the LSL stream. Returns Type Description IObservable < Int16 > An observable sequence that is identical to the source sequence but where there is an additional side effect of writing the values to the LSL stream. | Improve this Doc View Source Process(IObservable<Int32[]>) Pushes an observable sequence of signed 32-bit samples into the specified LSL stream. Declaration public IObservable<int[]> Process(IObservable<int[]> source) Parameters Type Name Description IObservable < Int32 []> source The sequence of signed 32-bit samples to push to the LSL stream. Each array must have the same number of values as the total number of channels in the stream. Returns Type Description IObservable < Int32 []> An observable sequence that is identical to the source sequence but where there is an additional side effect of writing the samples to the LSL stream. | Improve this Doc View Source Process(IObservable<Int32[,]>) Pushes an observable sequence of signed 32-bit chunks into the specified LSL stream. Declaration public IObservable<int[, ]> Process(IObservable<int[, ]> source) Parameters Type Name Description IObservable < Int32 [,]> source The sequence of signed 32-bit chunks to push to the LSL stream. Each array must have the same number of columns as the total number of channels in the stream. Returns Type Description IObservable < Int32 [,]> An observable sequence that is identical to the source sequence but where there is an additional side effect of writing the chunks to the LSL stream. | Improve this Doc View Source Process(IObservable<Int32>) Pushes an observable sequence of signed 32-bit integers into the specified LSL stream. Declaration public IObservable<int> Process(IObservable<int> source) Parameters Type Name Description IObservable < Int32 > source The sequence of signed 32-bit integers to push to the LSL stream. Returns Type Description IObservable < Int32 > An observable sequence that is identical to the source sequence but where there is an additional side effect of writing the values to the LSL stream. | Improve this Doc View Source Process(IObservable<Single[]>) Pushes an observable sequence of 32-bit floating-point samples into the specified LSL stream. Declaration public IObservable<float[]> Process(IObservable<float[]> source) Parameters Type Name Description IObservable < Single []> source The sequence of 32-bit floating-point samples to push to the LSL stream. Each array must have the same number of values as the total number of channels in the stream. Returns Type Description IObservable < Single []> An observable sequence that is identical to the source sequence but where there is an additional side effect of writing the samples to the LSL stream. | Improve this Doc View Source Process(IObservable<Single[,]>) Pushes an observable sequence of 32-bit floating-point chunks into the specified LSL stream. Declaration public IObservable<float[, ]> Process(IObservable<float[, ]> source) Parameters Type Name Description IObservable < Single [,]> source The sequence of 32-bit floating-point chunks to push to the LSL stream. Each array must have the same number of columns as the total number of channels in the stream. Returns Type Description IObservable < Single [,]> An observable sequence that is identical to the source sequence but where there is an additional side effect of writing the chunks to the LSL stream. | Improve this Doc View Source Process(IObservable<Single>) Pushes an observable sequence of 32-bit floating-point values into the specified LSL stream. Declaration public IObservable<float> Process(IObservable<float> source) Parameters Type Name Description IObservable < Single > source The sequence of 32-bit floating-point numbers to push to the LSL stream. Returns Type Description IObservable < Single > An observable sequence that is identical to the source sequence but where there is an additional side effect of writing the values to the LSL stream. | Improve this Doc View Source Process(IObservable<String[]>) Pushes an observable sequence of variable length samples into the specified LSL stream. Declaration public IObservable<string[]> Process(IObservable<string[]> source) Parameters Type Name Description IObservable < String []> source The sequence of variable length samples to push to the LSL stream. Each array must have the same number of values as the total number of channels in the stream. Returns Type Description IObservable < String []> An observable sequence that is identical to the source sequence but where there is an additional side effect of writing the samples to the LSL stream. | Improve this Doc View Source Process(IObservable<String[,]>) Pushes an observable sequence of variable length chunks into the specified LSL stream. Declaration public IObservable<string[, ]> Process(IObservable<string[, ]> source) Parameters Type Name Description IObservable < String [,]> source The sequence of variable length chunks to push to the LSL stream. Each array must have the same number of columns as the total number of channels in the stream. Returns Type Description IObservable < String [,]> An observable sequence that is identical to the source sequence but where there is an additional side effect of writing the chunks to the LSL stream. | Improve this Doc View Source Process(IObservable<String>) Pushes an observable sequence of variable length strings into the specified LSL stream. Declaration public IObservable<string> Process(IObservable<string> source) Parameters Type Name Description IObservable < String > source The sequence of variable length strings to push to the LSL stream. Returns Type Description IObservable < String > An observable sequence that is identical to the source sequence but where there is an additional side effect of writing the values to the LSL stream. Implements INamedElement"
  },
  "api/EmotionalCities.Lsl.Timestamp.html": {
    "href": "api/EmotionalCities.Lsl.Timestamp.html",
    "title": "Class Timestamp",
    "keywords": "Class Timestamp Represents an operator that records the local LSL timestamp for each element produced by an observable sequence. Inheritance Object Timestamp Inherited Members Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Namespace : EmotionalCities.Lsl Assembly : EmotionalCities.Lsl.dll Syntax public class Timestamp Methods | Improve this Doc View Source Process<TSource>(IObservable<TSource[]>) Records the local LSL timestamp for each sample produced by an observable sequence. Declaration public IObservable<TimestampedSample<TSource>> Process<TSource>(IObservable<TSource[]> source) Parameters Type Name Description IObservable <TSource[]> source The source sequence to timestamp samples for. Returns Type Description IObservable < TimestampedSample <TSource>> An observable sequence containing recorded LSL timestamp information for each sample in the source sequence. Type Parameters Name Description TSource The type of the elements in the source sequence. | Improve this Doc View Source Process<TSource>(IObservable<TSource>) Records the local LSL timestamp for each element produced by an observable sequence. Declaration public IObservable<Timestamped<TSource>> Process<TSource>(IObservable<TSource> source) Parameters Type Name Description IObservable <TSource> source The source sequence to timestamp elements for. Returns Type Description IObservable < Timestamped <TSource>> An observable sequence containing recorded LSL timestamp information for each element in the source sequence. Type Parameters Name Description TSource The type of the elements in the source sequence."
  },
  "api/EmotionalCities.Lsl.Timestamped.html": {
    "href": "api/EmotionalCities.Lsl.Timestamped.html",
    "title": "Class Timestamped",
    "keywords": "Class Timestamped Provides static methods for creating timestamped payload objects. Inheritance Object Timestamped Inherited Members Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Namespace : EmotionalCities.Lsl Assembly : EmotionalCities.Lsl.dll Syntax public static class Timestamped Methods | Improve this Doc View Source Create<T>(T, Double) Creates a new timestamped value. Declaration public static Timestamped<T> Create<T>(T value, double timestamp) Parameters Type Name Description T value The value. Double timestamp The timestamp, in fractional seconds. Returns Type Description Timestamped <T> A new instance of the Timestamped<T> class with the specified value and timestamp. Type Parameters Name Description T The type of the value."
  },
  "api/EmotionalCities.Lsl.Timestamped-1.html": {
    "href": "api/EmotionalCities.Lsl.Timestamped-1.html",
    "title": "Struct Timestamped<T>",
    "keywords": "Struct Timestamped<T> Represents a timestamped value. Implements IEquatable < Timestamped <T>> Inherited Members Object.Equals(Object, Object) Object.GetType() Object.ReferenceEquals(Object, Object) Namespace : EmotionalCities.Lsl Assembly : EmotionalCities.Lsl.dll Syntax public struct Timestamped<T> : IEquatable<Timestamped<T>> Type Parameters Name Description T The type of the value. Constructors | Improve this Doc View Source Timestamped(T, Double) Initializes a new instance of the Timestamped<T> class with the specified value and timestamp. Declaration public Timestamped(T value, double timestamp) Parameters Type Name Description T value The value. Double timestamp The timestamp, in fractional seconds. Properties | Improve this Doc View Source Timestamp Gets the timestamp, in fractional seconds. Declaration public double Timestamp { get; } Property Value Type Description Double | Improve this Doc View Source Value Gets the value. Declaration public T Value { get; } Property Value Type Description T Methods | Improve this Doc View Source Deconstruct(out T, out Double) Deconstructs the components of a timestamped value into separate variables. Declaration public void Deconstruct(out T value, out double timestamp) Parameters Type Name Description T value The value. Double timestamp The timestamp, in fractional seconds. | Improve this Doc View Source Equals(Timestamped<T>) Returns a value indicating whether this instance has the same value and timestamp as a specified Timestamped<T> structure. Declaration public bool Equals(Timestamped<T> other) Parameters Type Name Description Timestamped <T> other The Timestamped<T> structure to compare to this instance. Returns Type Description Boolean true if other has the same value and timestamp as this instance; otherwise, false . | Improve this Doc View Source Equals(Object) Tests to see whether the specified object is an Timestamped<T> structure with the same value and timestamp as this Timestamped<T> structure. Declaration public override bool Equals(object obj) Parameters Type Name Description Object obj The Object to test. Returns Type Description Boolean true if obj is an Timestamped<T> and has the same value and timestamp as this Timestamped<T> ; otherwise, false . Overrides ValueType.Equals(Object) | Improve this Doc View Source GetHashCode() Returns a hash code for this Timestamped<T> structure. Declaration public override int GetHashCode() Returns Type Description Int32 An integer value that specifies a hash value for this Timestamped<T> structure. Overrides ValueType.GetHashCode() | Improve this Doc View Source ToString() Creates a String representation of this Timestamped<T> structure. Declaration public override string ToString() Returns Type Description String A String containing the Value and Timestamp properties of this Timestamped<T> structure. Overrides ValueType.ToString() Operators | Improve this Doc View Source Equality(Timestamped<T>, Timestamped<T>) Tests whether two Timestamped<T> structures are equal. Declaration public static bool operator ==(Timestamped<T> left, Timestamped<T> right) Parameters Type Name Description Timestamped <T> left The Timestamped<T> structure on the left of the equality operator. Timestamped <T> right The Timestamped<T> structure on the right of the equality operator. Returns Type Description Boolean true if left and right have equal value and timestamp; otherwise, false . | Improve this Doc View Source Inequality(Timestamped<T>, Timestamped<T>) Tests whether two Timestamped<T> structures are different. Declaration public static bool operator !=(Timestamped<T> left, Timestamped<T> right) Parameters Type Name Description Timestamped <T> left The Timestamped<T> structure on the left of the inequality operator. Timestamped <T> right The Timestamped<T> structure on the right of the inequality operator. Returns Type Description Boolean true if left and right differ either in value or timestamp; false if left and right are equal. Implements System.IEquatable<T>"
  },
  "api/EmotionalCities.Lsl.TimestampedChunk.html": {
    "href": "api/EmotionalCities.Lsl.TimestampedChunk.html",
    "title": "Class TimestampedChunk",
    "keywords": "Class TimestampedChunk Provides static methods for creating timestamped chunk objects. Inheritance Object TimestampedChunk Inherited Members Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Namespace : EmotionalCities.Lsl Assembly : EmotionalCities.Lsl.dll Syntax public static class TimestampedChunk Methods | Improve this Doc View Source Create(Mat, Mat) Creates a new timestamped chunk buffer. Declaration public static TimestampedChunkBuffer Create(Mat data, Mat timestamps) Parameters Type Name Description Mat data The data samples of the timestamped chunk buffer. Mat timestamps The timestamps for each data sample, in fractional seconds. Returns Type Description TimestampedChunkBuffer A new instance of the TimestampedChunkBuffer class with the specified array of samples and corresponding timestamps. | Improve this Doc View Source Create<T>(T[,], Double[]) Creates a new timestamped chunk value. Declaration public static TimestampedChunk<T> Create<T>(T[, ] data, double[] timestamps) Parameters Type Name Description T[,] data The data samples of the timestamped chunk. Double [] timestamps The timestamps for each data sample, in fractional seconds. Returns Type Description TimestampedChunk <T> A new instance of the TimestampedChunk<T> class with the specified array of samples and corresponding timestamps. Type Parameters Name Description T The type of the data samples in the timestamped payload."
  },
  "api/EmotionalCities.Lsl.TimestampedChunk-1.html": {
    "href": "api/EmotionalCities.Lsl.TimestampedChunk-1.html",
    "title": "Struct TimestampedChunk<T>",
    "keywords": "Struct TimestampedChunk<T> Represents a timestamped chunk. Implements IEquatable < TimestampedChunk <T>> Inherited Members Object.Equals(Object, Object) Object.GetType() Object.ReferenceEquals(Object, Object) Namespace : EmotionalCities.Lsl Assembly : EmotionalCities.Lsl.dll Syntax public struct TimestampedChunk<T> : IEquatable<TimestampedChunk<T>> Type Parameters Name Description T The type of the data samples. Constructors | Improve this Doc View Source TimestampedChunk(T[,], Double[]) Initializes a new instance of the TimestampedChunk<T> structure with the specified data samples and corresponding timestamps. Declaration public TimestampedChunk(T[, ] data, double[] timestamps) Parameters Type Name Description T[,] data The data samples of the timestamped chunk. Double [] timestamps The timestamps for each data sample, in fractional seconds. Properties | Improve this Doc View Source Data Gets the data samples of the timestamped chunk. Declaration public T[, ] Data { get; } Property Value Type Description T[,] | Improve this Doc View Source Timestamps Gets the timestamps for each data sample, in fractional seconds. Declaration public double[] Timestamps { get; } Property Value Type Description Double [] Methods | Improve this Doc View Source Deconstruct(out T[,], out Double[]) Deconstructs the components of a timestamped chunk into separate variables. Declaration public void Deconstruct(out T[, ] data, out double[] timestamps) Parameters Type Name Description T[,] data The data samples of the timestamped chunk. Double [] timestamps The timestamps for each data sample, in fractional seconds. | Improve this Doc View Source Equals(TimestampedChunk<T>) Returns a value indicating whether this instance has the same data and timestamps as a specified TimestampedChunk<T> structure. Declaration public bool Equals(TimestampedChunk<T> other) Parameters Type Name Description TimestampedChunk <T> other The TimestampedChunk<T> structure to compare to this instance. Returns Type Description Boolean true if other has the same data and timestamps as this instance; otherwise, false . | Improve this Doc View Source Equals(Object) Tests to see whether the specified object is a TimestampedChunk<T> structure with the same data and timestamps as this TimestampedChunk<T> structure. Declaration public override bool Equals(object obj) Parameters Type Name Description Object obj The Object to test. Returns Type Description Boolean true if obj is a TimestampedChunk<T> and has the same data and timestamps as this TimestampedChunk<T> ; otherwise, false . Overrides ValueType.Equals(Object) | Improve this Doc View Source GetHashCode() Returns a hash code for this TimestampedChunk<T> structure. Declaration public override int GetHashCode() Returns Type Description Int32 An integer value that specifies a hash value for this TimestampedChunk<T> structure. Overrides ValueType.GetHashCode() | Improve this Doc View Source ToString() Creates a String representation of this TimestampedChunk<T> structure. Declaration public override string ToString() Returns Type Description String A String containing the Data and Timestamps properties of this TimestampedChunk<T> structure. Overrides ValueType.ToString() Operators | Improve this Doc View Source Equality(TimestampedChunk<T>, TimestampedChunk<T>) Tests whether two TimestampedChunk<T> structures are equal. Declaration public static bool operator ==(TimestampedChunk<T> left, TimestampedChunk<T> right) Parameters Type Name Description TimestampedChunk <T> left The TimestampedChunk<T> structure on the left of the equality operator. TimestampedChunk <T> right The TimestampedChunk<T> structure on the right of the equality operator. Returns Type Description Boolean true if left and right have the same data and timestamps; otherwise, false . | Improve this Doc View Source Inequality(TimestampedChunk<T>, TimestampedChunk<T>) Tests whether two TimestampedChunk<T> structures are different. Declaration public static bool operator !=(TimestampedChunk<T> left, TimestampedChunk<T> right) Parameters Type Name Description TimestampedChunk <T> left The TimestampedChunk<T> structure on the left of the inequality operator. TimestampedChunk <T> right The TimestampedChunk<T> structure on the right of the inequality operator. Returns Type Description Boolean true if left and right differ either in data or timestamps; false if left and right are equal. Implements System.IEquatable<T>"
  },
  "api/EmotionalCities.Lsl.TimestampedChunkBuffer.html": {
    "href": "api/EmotionalCities.Lsl.TimestampedChunkBuffer.html",
    "title": "Struct TimestampedChunkBuffer",
    "keywords": "Struct TimestampedChunkBuffer Represents a timestamped chunk buffer. Implements IEquatable < TimestampedChunkBuffer > Inherited Members Object.Equals(Object, Object) Object.GetType() Object.ReferenceEquals(Object, Object) Namespace : EmotionalCities.Lsl Assembly : EmotionalCities.Lsl.dll Syntax public struct TimestampedChunkBuffer : IEquatable<TimestampedChunkBuffer> Constructors | Improve this Doc View Source TimestampedChunkBuffer(Mat, Mat) Initializes a new instance of the TimestampedChunkBuffer structure with the specified data samples and corresponding timestamps. Declaration public TimestampedChunkBuffer(Mat data, Mat timestamps) Parameters Type Name Description Mat data The data samples of the timestamped chunk buffer. Mat timestamps The timestamps for each data sample, in fractional seconds. Properties | Improve this Doc View Source Data Gets the data samples of the timestamped chunk buffer. Declaration public Mat Data { get; } Property Value Type Description Mat | Improve this Doc View Source Timestamps Gets the timestamps for each data sample, in fractional seconds. Declaration public Mat Timestamps { get; } Property Value Type Description Mat Methods | Improve this Doc View Source Deconstruct(out Mat, out Mat) Deconstructs the components of a timestamped chunk buffer into separate variables. Declaration public void Deconstruct(out Mat data, out Mat timestamps) Parameters Type Name Description Mat data The data samples of the timestamped chunk buffer. Mat timestamps The timestamps for each data sample, in fractional seconds. | Improve this Doc View Source Equals(TimestampedChunkBuffer) Returns a value indicating whether this instance has the same data and timestamps as a specified TimestampedChunkBuffer structure. Declaration public bool Equals(TimestampedChunkBuffer other) Parameters Type Name Description TimestampedChunkBuffer other The TimestampedChunkBuffer structure to compare to this instance. Returns Type Description Boolean true if other has the same data and timestamps as this instance; otherwise, false . | Improve this Doc View Source Equals(Object) Tests to see whether the specified object is a TimestampedChunkBuffer structure with the same data and timestamps as this TimestampedChunkBuffer structure. Declaration public override bool Equals(object obj) Parameters Type Name Description Object obj The Object to test. Returns Type Description Boolean true if obj is a TimestampedChunkBuffer and has the same data and timestamps as this TimestampedChunkBuffer ; otherwise, false . Overrides ValueType.Equals(Object) | Improve this Doc View Source GetHashCode() Returns a hash code for this TimestampedChunkBuffer structure. Declaration public override int GetHashCode() Returns Type Description Int32 An integer value that specifies a hash value for this TimestampedChunkBuffer structure. Overrides ValueType.GetHashCode() | Improve this Doc View Source ToString() Creates a String representation of this TimestampedChunkBuffer structure. Declaration public override string ToString() Returns Type Description String A String containing the Data and Timestamps properties of this TimestampedChunkBuffer structure. Overrides ValueType.ToString() Operators | Improve this Doc View Source Equality(TimestampedChunkBuffer, TimestampedChunkBuffer) Tests whether two TimestampedChunkBuffer structures are equal. Declaration public static bool operator ==(TimestampedChunkBuffer left, TimestampedChunkBuffer right) Parameters Type Name Description TimestampedChunkBuffer left The TimestampedChunkBuffer structure on the left of the equality operator. TimestampedChunkBuffer right The TimestampedChunkBuffer structure on the right of the equality operator. Returns Type Description Boolean true if left and right have the same data and timestamps; otherwise, false . | Improve this Doc View Source Inequality(TimestampedChunkBuffer, TimestampedChunkBuffer) Tests whether two TimestampedChunkBuffer structures are different. Declaration public static bool operator !=(TimestampedChunkBuffer left, TimestampedChunkBuffer right) Parameters Type Name Description TimestampedChunkBuffer left The TimestampedChunkBuffer structure on the left of the inequality operator. TimestampedChunkBuffer right The TimestampedChunkBuffer structure on the right of the inequality operator. Returns Type Description Boolean true if left and right differ either in data or timestamps; false if left and right are equal. Implements System.IEquatable<T>"
  },
  "api/EmotionalCities.Lsl.TimestampedSample.html": {
    "href": "api/EmotionalCities.Lsl.TimestampedSample.html",
    "title": "Class TimestampedSample",
    "keywords": "Class TimestampedSample Provides static methods for creating timestamped sample objects. Inheritance Object TimestampedSample Inherited Members Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Namespace : EmotionalCities.Lsl Assembly : EmotionalCities.Lsl.dll Syntax public static class TimestampedSample Methods | Improve this Doc View Source Create<T>(T[], Double) Creates a new timestamped sample. Declaration public static TimestampedSample<T> Create<T>(T[] data, double timestamp) Parameters Type Name Description T[] data The sample values for each channel of the timestamped sample. Double timestamp The timestamp of the data sample, in fractional seconds. Returns Type Description TimestampedSample <T> A new instance of the TimestampedSample<T> class with the specified data samples and corresponding timestamp. Type Parameters Name Description T The type of the data samples."
  },
  "api/EmotionalCities.Lsl.TimestampedSample-1.html": {
    "href": "api/EmotionalCities.Lsl.TimestampedSample-1.html",
    "title": "Struct TimestampedSample<T>",
    "keywords": "Struct TimestampedSample<T> Represents a timestamped sample. Implements IEquatable < TimestampedSample <T>> Inherited Members Object.Equals(Object, Object) Object.GetType() Object.ReferenceEquals(Object, Object) Namespace : EmotionalCities.Lsl Assembly : EmotionalCities.Lsl.dll Syntax public struct TimestampedSample<T> : IEquatable<TimestampedSample<T>> Type Parameters Name Description T The type of the data samples. Constructors | Improve this Doc View Source TimestampedSample(T[], Double) Initializes a new instance of the TimestampedSample<T> structure with the specified data samples and corresponding timestamp. Declaration public TimestampedSample(T[] data, double timestamp) Parameters Type Name Description T[] data The sample values for each channel of the timestamped sample. Double timestamp The timestamp of the data sample, in fractional seconds. Properties | Improve this Doc View Source Data Gets the sample values for each channel of the timestamped sample. Declaration public T[] Data { get; } Property Value Type Description T[] | Improve this Doc View Source Timestamp Gets the timestamp of the data sample, in fractional seconds. Declaration public double Timestamp { get; } Property Value Type Description Double Methods | Improve this Doc View Source Deconstruct(out T[], out Double) Deconstructs the components of a timestamped sample into separate variables. Declaration public void Deconstruct(out T[] data, out double timestamp) Parameters Type Name Description T[] data The sample values for each channel of the timestamped sample. Double timestamp The timestamp of the data sample, in fractional seconds. | Improve this Doc View Source Equals(TimestampedSample<T>) Returns a value indicating whether this instance has the same data and timestamp as a specified TimestampedSample<T> structure. Declaration public bool Equals(TimestampedSample<T> other) Parameters Type Name Description TimestampedSample <T> other The TimestampedSample<T> structure to compare to this instance. Returns Type Description Boolean true if other has the same data and timestamp as this instance; otherwise, false . | Improve this Doc View Source Equals(Object) Tests to see whether the specified object is a TimestampedSample<T> structure with the same data and timestamp as this TimestampedSample<T> structure. Declaration public override bool Equals(object obj) Parameters Type Name Description Object obj The Object to test. Returns Type Description Boolean true if obj is a TimestampedSample<T> and has the same data and timestamp as this TimestampedSample<T> ; otherwise, false . Overrides ValueType.Equals(Object) | Improve this Doc View Source GetHashCode() Returns a hash code for this TimestampedSample<T> structure. Declaration public override int GetHashCode() Returns Type Description Int32 An integer value that specifies a hash value for this TimestampedSample<T> structure. Overrides ValueType.GetHashCode() | Improve this Doc View Source ToString() Creates a String representation of this TimestampedSample<T> structure. Declaration public override string ToString() Returns Type Description String A String containing the Data and Timestamp properties of this TimestampedSample<T> structure. Overrides ValueType.ToString() Operators | Improve this Doc View Source Equality(TimestampedSample<T>, TimestampedSample<T>) Tests whether two TimestampedSample<T> structures are equal. Declaration public static bool operator ==(TimestampedSample<T> left, TimestampedSample<T> right) Parameters Type Name Description TimestampedSample <T> left The TimestampedSample<T> structure on the left of the equality operator. TimestampedSample <T> right The TimestampedSample<T> structure on the right of the equality operator. Returns Type Description Boolean true if left and right have the same data and timestamp; otherwise, false . | Improve this Doc View Source Inequality(TimestampedSample<T>, TimestampedSample<T>) Tests whether two TimestampedSample<T> structures are different. Declaration public static bool operator !=(TimestampedSample<T> left, TimestampedSample<T> right) Parameters Type Name Description TimestampedSample <T> left The TimestampedSample<T> structure on the left of the inequality operator. TimestampedSample <T> right The TimestampedSample<T> structure on the right of the inequality operator. Returns Type Description Boolean true if left and right differ either in data or timestamp; false if left and right are equal. Implements System.IEquatable<T>"
  },
  "articles/intro.html": {
    "href": "articles/intro.html",
    "title": "Getting Started",
    "keywords": "Getting Started The easiest way to start using EmotionalCities.Lsl in your projects is to install the NuGet package from the Bonsai package manager."
  },
  "index.html": {
    "href": "index.html",
    "title": "Emotional Cities - LSL Documentation",
    "keywords": "Emotional Cities - LSL Documentation Bonsai Library containing interfaces for streaming data from devices implementing the Lab Streaming Layer protocol. Warning These docs are under active development, feel free to contribute by either raising an issue or following the links to Improve this Doc . This package was developed for the eMOTIONAL CITIES Project, which received funding from European Union’s Horizon 2020 research and innovation programme, under the grant agreement No 945307. The eMOTIONAL CITIES Project is a consortium of 12 partners co-coordinated by IGOT and FMUL, taking place between 2021 and 2025. More information at https://emotionalcities-h2020.eu/"
  }
}